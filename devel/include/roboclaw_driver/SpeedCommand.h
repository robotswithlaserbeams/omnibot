// Generated by gencpp from file roboclaw_driver/SpeedCommand.msg
// DO NOT EDIT!


#ifndef ROBOCLAW_DRIVER_MESSAGE_SPEEDCOMMAND_H
#define ROBOCLAW_DRIVER_MESSAGE_SPEEDCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roboclaw_driver
{
template <class ContainerAllocator>
struct SpeedCommand_
{
  typedef SpeedCommand_<ContainerAllocator> Type;

  SpeedCommand_()
    : m1_qpps(0)
    , m2_qpps(0)
    , accel(0)
    , max_secs(0)  {
    }
  SpeedCommand_(const ContainerAllocator& _alloc)
    : m1_qpps(0)
    , m2_qpps(0)
    , accel(0)
    , max_secs(0)  {
  (void)_alloc;
    }



   typedef int32_t _m1_qpps_type;
  _m1_qpps_type m1_qpps;

   typedef int32_t _m2_qpps_type;
  _m2_qpps_type m2_qpps;

   typedef uint32_t _accel_type;
  _accel_type accel;

   typedef uint32_t _max_secs_type;
  _max_secs_type max_secs;





  typedef boost::shared_ptr< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedCommand_

typedef ::roboclaw_driver::SpeedCommand_<std::allocator<void> > SpeedCommand;

typedef boost::shared_ptr< ::roboclaw_driver::SpeedCommand > SpeedCommandPtr;
typedef boost::shared_ptr< ::roboclaw_driver::SpeedCommand const> SpeedCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roboclaw_driver::SpeedCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roboclaw_driver::SpeedCommand_<ContainerAllocator1> & lhs, const ::roboclaw_driver::SpeedCommand_<ContainerAllocator2> & rhs)
{
  return lhs.m1_qpps == rhs.m1_qpps &&
    lhs.m2_qpps == rhs.m2_qpps &&
    lhs.accel == rhs.accel &&
    lhs.max_secs == rhs.max_secs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roboclaw_driver::SpeedCommand_<ContainerAllocator1> & lhs, const ::roboclaw_driver::SpeedCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roboclaw_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1217b4f680d01eb5008f99442806c05f";
  }

  static const char* value(const ::roboclaw_driver::SpeedCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1217b4f680d01eb5ULL;
  static const uint64_t static_value2 = 0x008f99442806c05fULL;
};

template<class ContainerAllocator>
struct DataType< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roboclaw_driver/SpeedCommand";
  }

  static const char* value(const ::roboclaw_driver::SpeedCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Motor speed in QPPS\n"
"int32 m1_qpps\n"
"int32 m2_qpps\n"
"\n"
"# Acceleration\n"
"uint32 accel\n"
"\n"
"# Max seconds before automatically stopping\n"
"uint32 max_secs\n"
;
  }

  static const char* value(const ::roboclaw_driver::SpeedCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.m1_qpps);
      stream.next(m.m2_qpps);
      stream.next(m.accel);
      stream.next(m.max_secs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roboclaw_driver::SpeedCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roboclaw_driver::SpeedCommand_<ContainerAllocator>& v)
  {
    s << indent << "m1_qpps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.m1_qpps);
    s << indent << "m2_qpps: ";
    Printer<int32_t>::stream(s, indent + "  ", v.m2_qpps);
    s << indent << "accel: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.accel);
    s << indent << "max_secs: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.max_secs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOCLAW_DRIVER_MESSAGE_SPEEDCOMMAND_H
